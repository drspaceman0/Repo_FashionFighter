<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
movementFPS=0.4
attackFPS=0.2
image_speed=movementFPS;

moveSpd=6
state=IDLE

velocityH=0
velocityV=0

global.player=id

show_debug_message("Player id: " + string(id))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player movement and attack

get_input(self);

// decide state
if(state==JUMP or keyboard_check_pressed(ord('X'))) state=JUMP
else if(zKey or sprite_index==spr_punch) state=ATTACK
else if(leftKey or rightKey or upKey or downKey) state=MOVE
else state=IDLE

switch(state)
{
    case IDLE:
        speed = 0
        if(sprite_index != spr_idle) 
        {
            sprite_index=spr_idle;
            image_index=0
        }  
        break;
    case JUMP:
        if(sprite_index!=spr_jump)
        {
            sprite_index=spr_jump
            image_index=0
            image_speed=0.2
            velocityV=-2
            break
        }
        if(abs(velocityV)&lt;0.5)
        {
            image_index=2
        } else if(velocityV &lt; 0) {
            image_index=1
        } else if(velocityV &gt;= 2) {
            image_index=4
            state=IDLE 
            break
        } else if(velocityV &gt; 0) {
            image_index=3
        }
        
        hMove=0;vMove=0;
        if(leftKey)hMove -= 1
        if(rightKey)hMove += 1
        if(upKey)vMove -= 1
        if(downKey)vMove += 1 
        x += hMove * moveSpd
        y += vMove * moveSpd + velocityV*4
   
        if(hMove != 0) image_xscale = hMove
        
        velocityV += 0.2
        break
        // jump state moves onto MOVE state 
    case MOVE:
        hMove=0;vMove=0;
        if(leftKey)hMove -= 1
        if(rightKey)hMove += 1
        if(upKey)vMove -= 1
        if(downKey)vMove += 1 
        x += hMove * moveSpd
        y += vMove * moveSpd;
        if(sprite_index!=spr_run )
        {
            sprite_index=spr_run;
            image_index=0
        }
        if(hMove != 0) image_xscale = hMove
        break
    
    case ATTACK: 
        image_speed=attackFPS
        // begin attack
        if(sprite_index!=spr_punch)
        { 
            hitbox = instance_create(x + image_xscale*32,y,obj_hitbox)
            hitbox.parent=id 
            hitbox.dmg=2 
            sprite_index=spr_punch 
            image_index=0
        } else if(image_index == 2)
        {
            // stop punching on last frame
            sprite_index=spr_idle
            image_index=0
            image_speed=movementFPS
        }
        break
    case DEATH:
        instance_destroy()
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
